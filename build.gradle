plugins {
  id 'java'
  id 'maven'
  id 'maven-publish'
  id 'jacoco'
  id 'com.github.spotbugs' version '4.6.0'
  id 'org.owasp.dependencycheck' version '6.1.0'
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '4.0-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '4.0-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'

  delombokTargetDir = new File("${project.projectDir}/src/main/generated")

  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")
  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  interlokLicenseJavadocs= project.hasProperty('interlokLicenseJavadocs') ? project.getProperty('interlokLicenseJavadocs') : javadocsBaseUrl + "/interlok-licensing/" + interlokCoreVersion

  componentName='Interlok JMX Jolokia'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  slf4jVersion="1.7.30"
  log4j2Version = '2.14.0'
  mockitoVersion = '3.7.7'
  jolokiaVersion = '1.6.2'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

ext.gitBranchNameOrTimestamp = { branchName ->
  if (branchName.equals("HEAD") || branchName.equals("develop") || branchName.startsWith("release")) {
    return new Date().format('HH:mm:ss z');
  }
  return branchName;
}

ext.buildInfo = { ->
   new ByteArrayOutputStream().withStream { os ->
      exec {
        executable = "git"
        args = ["rev-parse", "--abbrev-ref", "HEAD"]
        standardOutput = os
      }
      def branchName = os.toString().replaceAll("\r", "").replaceAll("\n", "").trim();
      return gitBranchNameOrTimestamp(branchName);
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
  maven { url "$defaultNexusRepo" }
  maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url "$nexusBaseUrl/content/groups/private"
    }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}


configurations {
  javadoc {}
  umlDoclet {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'stax', module: 'stax-api'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
  // INTERLOK-3197 exclude old javax.mail
  all*.exclude group: 'com.sun.mail', module: 'javax.mail'
  all*.exclude group: 'javax.validation', module: 'validation-api'
  all*.exclude group: 'javax.activation', module: 'activation'
  all*.exclude group: 'javax.activation', module: 'javax.activation-api'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  // Since this is all maven now, we should be in a position where SNAPSHOT is auto
  // regarded as CHANGING...
  compile ("com.adaptris:interlok-core:$interlokCoreVersion")
  compile ("com.adaptris:interlok-common:$interlokCoreVersion")

  compile ("org.jolokia:jolokia-core:$jolokiaVersion")
  compile ("org.jolokia:jolokia-jsr160:$jolokiaVersion")

  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion")
  umlDoclet("nl.talsmasoftware:umldoclet:1.1.4")

  testCompile ('junit:junit:4.13.1')
  testCompile ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing=true }
  testCompile ("org.mockito:mockito-core:$mockitoVersion")
  testCompile ("org.mockito:mockito-inline:$mockitoVersion")
  testCompile ("org.awaitility:awaitility:4.0.3")
  // INTERLOK-3233 we still need log4j since we're doing MDC stuffs.
  testCompile ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-api:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  testCompile ("org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version")

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion")
  offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar")
  offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar")

}


jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}


sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}

// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'groupId', value: project.group)
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.version', value: project.version)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
      entry(key: 'build.info', value: buildInfo())
    }
  }
}

task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'Documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  include "element-list"
  into offlineJavadocPackageDir
}


javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    options.addBooleanOption "-no-module-directories", true
    title= componentName
  }
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Jolokia management component for Interlok.")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "4.0.0+")
        properties.appendNode("tags", "jolokia jmx http management")
        properties.appendNode("readme", "https://github.com/adaptris/interlok-jolokia/raw/develop/README.md")
        properties.appendNode("repository", "https://github.com/adaptris/interlok-jolokia")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugsMain {
  effort = "max"
  reportLevel = "high"
  effort = "max"
  reports {
    xml {
      enabled = false
    }
    html {
      enabled = true
    }
  }
}

dependencyCheck  {
  suppressionFiles= [ "https://raw.githubusercontent.com/adaptris/interlok/develop/gradle/owasp-exclude.xml" ]
  skipConfigurations = [ "antSql", "spotbugs", "umlDoclet", "offlineJavadocPackages", "javadoc", "jacocoAnt", "jacocoAgent", "spotbugsPlugins", "spotbugsSlf4j" ]
  formats = [ "HTML", "JUNIT" ]
  junitFailOnCVSS = 7.0
  failBuildOnCVSS = 7.0
  analyzers {
    assemblyEnabled=false
  }
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false


javadoc.dependsOn offlinePackageList
check.dependsOn jacocoTestReport
